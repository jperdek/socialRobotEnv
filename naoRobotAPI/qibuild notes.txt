1. qibuild init 
	-necessary to initialize otherwise other commands will be not functional, errors like not in workpath

2. qisrc create foo
	-to create new c++ project, such as hello world example
	-is easy to configure
	-foo is name of the project, replace it further

3. qibuild configure
	-configuring new project
	-creates directory build-sys-linux-x86_64
	-even qibuild configure foo

	not in path error: cmake is not istalled an dnot in path and quibuild configure is not called

4. quibuild make
	-creates executable on the path ./build-sys-linux-x86_64/sdk/bin/foo

	-can be executed by
		./build-sys-linux-x86_64/sdk/bin/foo

qibuild config
	-different as qibuild configure
qitoolchain info
	-prints information



qisrc add .
	-adds changes to qisrc worktree
	-if  . throws error then add each file manually such as: 
		qisrc add ./myapp.pml
		qisrc add ./manifest.xml



qitoolchain - python:
1. creation of service and its configuration in Python
	create qiproject.xml and myservice.py
2. create pml and manifest files for deploy
	 myapp.pml and ./manifest.xml
3. qibuild initialization
	run qibuild init 
4. atom toolchain creation (atom can be changed for other name)
	run qitoolchain create atom
5. adding dependencies to qibuild
	run 
		qisrc add ./myapp.pml
		qisrc add ./manifest.xml
		qisrc add ./qiproject.xml
		qisrc add ./myservice.py
6. creation of pkg file of python application
	qipkg make-package myapp.pml
7. deployment of the python application to the robot
	qipkg deploy-package myapp-0.1.0-lunux_x86_64.pkg --url nao@nao.local


7. start python service
	qicli call ALServiceManager.start myapp.myservice
7. stop python service
	qicli call ALServiceManager.stop myapp.myservice

