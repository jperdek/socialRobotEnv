def truncate_times_and_keys(times, keys, threshold):
    new_times = []
    new_keys = []
    for time_list, key_list in zip(times, keys):
        # Find the index where times exceed the threshold
        index = next((i for i, t in enumerate(time_list) if t > threshold), None)
        
        # If such index is found, truncate; else, keep the original
        if index is not None:
            new_times.append(time_list[:index])
            new_keys.append(key_list[:index])
        else:
            new_times.append(time_list)
            new_keys.append(key_list)
    return new_times, new_keys

names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.166035, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.16606, [3, -0.386667, 0], [3, 0.693333, 0]], [-0.16606, [3, -0.693333, 0], [3, 0.426667, 0]], [-0.16606, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.16606, [3, -0.266667, 0], [3, 0.333333, 0]], [-0.16606, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.169649, [3, -0.333333, 0], [3, 0.4, 0]], [-0.163584, [3, -0.4, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.00539738, [3, -0.0266667, 0], [3, 0.386667, 0]], [0, [3, -0.386667, 0], [3, 0.693333, 0]], [0, [3, -0.693333, 0], [3, 0.426667, 0]], [0, [3, -0.426667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.084003, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.144862, [3, -0.386667, 0], [3, 0.693333, 0]], [0.261799, [3, -0.693333, -0.101922], [3, 0.426667, 0.062721]], [0.349066, [3, -0.426667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.333333, 0]], [0.349066, [3, -0.333333, 0], [3, 0.333333, 0]], [0.339913, [3, -0.333333, 0.00915252], [3, 0.4, -0.010983]], [0.265498, [3, -0.4, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.108662, [3, -0.0266667, 0], [3, 0.386667, 0]], [0, [3, -0.386667, 0], [3, 0.693333, 0]], [0, [3, -0.693333, 0], [3, 0.426667, 0]], [0, [3, -0.426667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00625884, [3, -0.333333, 0], [3, 0.4, 0]], [-0.00146097, [3, -0.4, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.41675, [3, -0.0266667, 0], [3, 0.386667, 0]], [-1.38657, [3, -0.386667, 0], [3, 0.693333, 0]], [-1.35088, [3, -0.693333, 0], [3, 0.426667, 0]], [-1.35088, [3, -0.426667, 0], [3, 0.266667, 0]], [-1.35088, [3, -0.266667, 0], [3, 0.333333, 0]], [-1.35088, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.35327, [3, -0.333333, 0], [3, 0.4, 0]], [-1.35139, [3, -0.4, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-1.19571, [3, -0.0266667, 0], [3, 0.386667, 0]], [-1.39483, [3, -0.386667, 0], [3, 0.693333, 0]], [-1.39483, [3, -0.693333, 0], [3, 0.426667, 0]], [-1.39483, [3, -0.426667, 0], [3, 0.266667, 0]], [-1.39483, [3, -0.266667, 0], [3, 0.333333, 0]], [-1.39483, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.38611, [3, -0.333333, -0.000186199], [3, 0.4, 0.000223439]], [-1.38589, [3, -0.4, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.304691, [3, -0.0266667, 0], [3, 0.386667, 0]], [0.304691, [3, -0.386667, 0], [3, 0.693333, 0]], [0.304691, [3, -0.693333, 0], [3, 0.426667, 0]], [0.304691, [3, -0.426667, 0], [3, 0.266667, 0]], [0.304691, [3, -0.266667, 0], [3, 0.333333, 0]], [0.304691, [3, -0.333333, 0], [3, 0.333333, 0]], [0.304691, [3, -0.333333, 0], [3, 0.4, 0]], [0.294947, [3, -0.4, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.125205, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.633555, [3, -0.386667, 0.173035], [3, 0.693333, -0.31027]], [-1.32471, [3, -0.693333, 0], [3, 0.426667, 0]], [-1.32471, [3, -0.426667, 0], [3, 0.266667, 0]], [-1.32471, [3, -0.266667, 0], [3, 0.333333, 0]], [-1.32471, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.2303, [3, -0.333333, 0], [3, 0.4, 0]], [-1.23046, [3, -0.4, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.110933, [3, -0.0266667, 0], [3, 0.386667, 0]], [0, [3, -0.386667, 0.0236534], [3, 0.693333, -0.042413]], [-0.0872665, [3, -0.693333, 0.0216088], [3, 0.426667, -0.0132977]], [-0.10472, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.0523599, [3, -0.266667, -0.0103427], [3, 0.333333, 0.0129284]], [-0.0349066, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0376726, [3, -0.333333, 0], [3, 0.4, 0]], [0.0313534, [3, -0.4, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.170305, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.750492, [3, -0.386667, 0], [3, 0.693333, 0]], [-0.610865, [3, -0.693333, 0], [3, 0.426667, 0]], [-0.698132, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.610865, [3, -0.266667, -0.0258567], [3, 0.333333, 0.0323209]], [-0.523599, [3, -0.333333, -0.0206531], [3, 0.333333, 0.0206531]], [-0.486947, [3, -0.333333, -0.00718123], [3, 0.4, 0.00861748]], [-0.476203, [3, -0.4, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.0864399, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.04694, [3, -0.386667, -0.000144067], [3, 0.693333, 0.000258327]], [1.0472, [3, -0.693333, -0.000258327], [3, 0.426667, 0.00015897]], [1.11701, [3, -0.426667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.333333, 0]], [1.11701, [3, -0.333333, 0], [3, 0.333333, 0]], [1.04742, [3, -0.333333, 0], [3, 0.4, 0]], [1.21736, [3, -0.4, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[1.44846, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.05592, [3, -0.386667, 0.120164], [3, 0.693333, -0.215466]], [0.441568, [3, -0.693333, 0], [3, 0.426667, 0]], [0.441568, [3, -0.426667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.333333, 0]], [0.441568, [3, -0.333333, 0], [3, 0.333333, 0]], [0.45115, [3, -0.333333, 0], [3, 0.4, 0]], [0.45115, [3, -0.4, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.224837, [3, -0.0266667, 0], [3, 0.386667, 0]], [0.302179, [3, -0.386667, 0], [3, 0.693333, 0]], [0.302179, [3, -0.693333, 0], [3, 0.426667, 0]], [0.302179, [3, -0.426667, 0], [3, 0.266667, 0]], [0.302179, [3, -0.266667, 0], [3, 0.333333, 0]], [0.302179, [3, -0.333333, 0], [3, 0.333333, 0]], [0.293906, [3, -0.333333, 0], [3, 0.4, 0]], [0.294523, [3, -0.4, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.101746, [3, -0.0266667, 0], [3, 0.386667, 0]], [0.146244, [3, -0.386667, 0], [3, 0.693333, 0]], [0.146244, [3, -0.693333, 0], [3, 0.426667, 0]], [0.146244, [3, -0.426667, 0], [3, 0.266667, 0]], [0.146244, [3, -0.266667, 0], [3, 0.333333, 0]], [0.146244, [3, -0.333333, 0], [3, 0.333333, 0]], [0.145701, [3, -0.333333, 0.000319766], [3, 0.4, -0.000383719]], [0.144133, [3, -0.4, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.0847546, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.144862, [3, -0.386667, 0], [3, 0.693333, 0]], [0.261799, [3, -0.693333, -0.101922], [3, 0.426667, 0.062721]], [0.349066, [3, -0.426667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.333333, 0]], [0.349066, [3, -0.333333, 0], [3, 0.333333, 0]], [0.339913, [3, -0.333333, 0.00915252], [3, 0.4, -0.010983]], [0.265498, [3, -0.4, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.109758, [3, -0.0266667, 0], [3, 0.386667, 0]], [0, [3, -0.386667, 0], [3, 0.693333, 0]], [0, [3, -0.693333, 0], [3, 0.426667, 0]], [0, [3, -0.426667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.333333, 0]], [0.00632195, [3, -0.333333, -0.00147815], [3, 0.4, 0.00177378]], [0.00975578, [3, -0.4, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.417099, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.38657, [3, -0.386667, 0], [3, 0.693333, 0]], [1.35088, [3, -0.693333, 0], [3, 0.426667, 0]], [1.35088, [3, -0.426667, 0], [3, 0.266667, 0]], [1.35088, [3, -0.266667, 0], [3, 0.333333, 0]], [1.35088, [3, -0.333333, 0], [3, 0.333333, 0]], [1.35327, [3, -0.333333, 0], [3, 0.4, 0]], [1.35139, [3, -0.4, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[1.19875, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.39483, [3, -0.386667, 0], [3, 0.693333, 0]], [1.39483, [3, -0.693333, 0], [3, 0.426667, 0]], [1.39483, [3, -0.426667, 0], [3, 0.266667, 0]], [1.39483, [3, -0.266667, 0], [3, 0.333333, 0]], [1.39483, [3, -0.333333, 0], [3, 0.333333, 0]], [1.38625, [3, -0.333333, 0], [3, 0.4, 0]], [1.39038, [3, -0.4, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.29357, [3, -0.0266667, 0], [3, 0.386667, 0]], [0.29357, [3, -0.386667, 0], [3, 0.693333, 0]], [0.29357, [3, -0.693333, 0], [3, 0.426667, 0]], [0.29357, [3, -0.426667, 0], [3, 0.266667, 0]], [0.29357, [3, -0.266667, 0], [3, 0.333333, 0]], [0.29357, [3, -0.333333, 0], [3, 0.333333, 0]], [0.293013, [3, -0.333333, 0], [3, 0.4, 0]], [0.29419, [3, -0.4, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[0.125381, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.633555, [3, -0.386667, 0.173056], [3, 0.693333, -0.310307]], [-1.32471, [3, -0.693333, 0], [3, 0.426667, 0]], [-1.32471, [3, -0.426667, 0], [3, 0.266667, 0]], [-1.34216, [3, -0.266667, 0], [3, 0.333333, 0]], [-1.34216, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.24064, [3, -0.333333, 0], [3, 0.4, 0]], [-1.24462, [3, -0.4, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.117281, [3, -0.0266667, 0], [3, 0.386667, 0]], [0, [3, -0.386667, -0.024411], [3, 0.693333, 0.0437714]], [0.0872665, [3, -0.693333, -0.0216088], [3, 0.426667, 0.0132977]], [0.10472, [3, -0.426667, 0], [3, 0.266667, 0]], [0.0523599, [3, -0.266667, 0.0103427], [3, 0.333333, -0.0129284]], [0.0349066, [3, -0.333333, 0], [3, 0.333333, 0]], [0.0376726, [3, -0.333333, 0], [3, 0.4, 0]], [-0.00213946, [3, -0.4, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.170305, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.750492, [3, -0.386667, 0], [3, 0.693333, 0]], [-0.610865, [3, -0.693333, 0], [3, 0.426667, 0]], [-0.698132, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.610865, [3, -0.266667, -0.0258567], [3, 0.333333, 0.0323209]], [-0.523599, [3, -0.333333, -0.0206531], [3, 0.333333, 0.0206531]], [-0.486947, [3, -0.333333, -0.00718123], [3, 0.4, 0.00861748]], [-0.476203, [3, -0.4, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.0877192, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.04694, [3, -0.386667, -0.000144067], [3, 0.693333, 0.000258327]], [1.0472, [3, -0.693333, -0.000258327], [3, 0.426667, 0.00015897]], [1.11701, [3, -0.426667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.333333, 0]], [1.11701, [3, -0.333333, 0], [3, 0.333333, 0]], [1.04742, [3, -0.333333, 0], [3, 0.4, 0]], [1.21136, [3, -0.4, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[1.44552, [3, -0.0266667, 0], [3, 0.386667, 0]], [1.05592, [3, -0.386667, 0.119813], [3, 0.693333, -0.214838]], [0.441568, [3, -0.693333, 0], [3, 0.426667, 0]], [0.441568, [3, -0.426667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.333333, 0]], [0.441568, [3, -0.333333, 0], [3, 0.333333, 0]], [0.451164, [3, -0.333333, 0], [3, 0.4, 0]], [0.451164, [3, -0.4, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.226106, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.302179, [3, -0.386667, 0], [3, 0.693333, 0]], [-0.302179, [3, -0.693333, 0], [3, 0.426667, 0]], [-0.302179, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.302179, [3, -0.266667, 0], [3, 0.333333, 0]], [-0.302179, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.294041, [3, -0.333333, 0], [3, 0.4, 0]], [-0.294739, [3, -0.4, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.04, 1.2, 3.28, 4.56, 5.36, 6.36, 7.36, 8.56])
keys.append([[-0.0992391, [3, -0.0266667, 0], [3, 0.386667, 0]], [-0.143533, [3, -0.386667, 0], [3, 0.693333, 0]], [-0.143533, [3, -0.693333, 0], [3, 0.426667, 0]], [-0.143533, [3, -0.426667, 0], [3, 0.266667, 0]], [-0.143533, [3, -0.266667, 0], [3, 0.333333, 0]], [-0.143533, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.13878, [3, -0.333333, 0], [3, 0.4, 0]], [-0.13986, [3, -0.4, 0], [3, 0, 0]]])

time_threshold=3.28
truncated_times, truncated_keys = truncate_times_and_keys(times, keys, time_threshold)

times = truncated_times
keys = truncated_keys
    # motionProxy.angleInterpolationBezier(names, truncated_times, truncated_keys)