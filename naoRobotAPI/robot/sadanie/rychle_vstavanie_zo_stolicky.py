def truncate_times_and_keys_from_threshold(times, keys, threshold):
    new_times = []
    new_keys = []
    for time_list, key_list in zip(times, keys):
        # Find the index where times meet or exceed the threshold
        index = next((i for i, t in enumerate(time_list) if t >= threshold), None)
        
        # If such an index is found, adjust times from that index onward
        if index is not None:
            adjusted_times = [t - time_list[index] for t in time_list[index:]]
            new_times.append(adjusted_times)
            new_keys.append(key_list[index:])
        else:
            new_times.append(time_list)
            new_keys.append(key_list)

    return new_times, new_keys

names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.169649, [3, -0.4, 0], [3, 0.266667, 0]], [-0.16606, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.16606, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.16606, [3, -0.266667, 0], [3, 0.4, 0]], [-0.16606, [3, -0.4, 0], [3, 0.426667, 0]], [-0.166005, [3, -0.426667, -6.45615e-08], [3, 0.44, 6.6579e-08]], [-0.166005, [3, -0.44, 0], [3, 0.466667, 0]], [-0.166005, [3, -0.466667, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0, [3, -0.4, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.426667, 0]], [0.00269869, [3, -0.426667, -7.81799e-09], [3, 0.44, 8.0623e-09]], [0.0026987, [3, -0.44, 0], [3, 0.466667, 0]], [0.00269869, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.339913, [3, -0.4, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.4, 0]], [0.261799, [3, -0.4, 0.0780552], [3, 0.426667, -0.0832589]], [-0.134877, [3, -0.426667, 0], [3, 0.44, 0]], [-0.134877, [3, -0.44, -5.82566e-08], [3, 0.466667, 6.17874e-08]], [0.0768539, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.00625884, [3, -0.4, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.426667, 0]], [0.00043631, [3, -0.426667, 0], [3, 0.44, 0]], [0.00043631, [3, -0.44, 9.75279e-11], [3, 0.466667, -1.03439e-10]], [-0.0981274, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-1.35327, [3, -0.4, 0], [3, 0.266667, 0]], [-1.35088, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.35088, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.35088, [3, -0.266667, 0], [3, 0.4, 0]], [-1.35088, [3, -0.4, 0], [3, 0.426667, 0]], [-1.07643, [3, -0.426667, 0], [3, 0.44, 0]], [-1.07643, [3, -0.44, 0], [3, 0.466667, 0]], [-1.07643, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-1.38611, [3, -0.4, 0], [3, 0.266667, 0]], [-1.39483, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.39483, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.39483, [3, -0.266667, 0], [3, 0.4, 0]], [-1.39483, [3, -0.4, 0], [3, 0.426667, 0]], [-0.791883, [3, -0.426667, -4.5193e-07], [3, 0.44, 4.66053e-07]], [-0.791882, [3, -0.44, 0], [3, 0.466667, 0]], [-0.791883, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LHand")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.304691, [3, -0.4, 0], [3, 0.266667, 0]], [0.304691, [3, -0.266667, 0], [3, 0.266667, 0]], [0.304691, [3, -0.266667, 0], [3, 0.266667, 0]], [0.304691, [3, -0.266667, 0], [3, 0.4, 0]], [0.304691, [3, -0.4, 0], [3, 0.426667, 0]], [0.299044, [3, -0.426667, 1.15597e-07], [3, 0.44, -1.19209e-07]], [0.299044, [3, -0.44, 0], [3, 0.466667, 0]], [0.299044, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-1.2303, [3, -0.4, 0], [3, 0.266667, 0]], [-1.32471, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.32471, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.32471, [3, -0.266667, 0], [3, 0.4, 0]], [-1.32471, [3, -0.4, 0], [3, 0.426667, 0]], [-0.634814, [3, -0.426667, 0], [3, 0.44, 0]], [-0.634815, [3, -0.44, 0], [3, 0.466667, 0]], [0.120077, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.0376726, [3, -0.4, 0], [3, 0.266667, 0]], [-0.0349066, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.0523599, [3, -0.266667, 0.0116355], [3, 0.266667, -0.0116355]], [-0.10472, [3, -0.266667, 0], [3, 0.4, 0]], [-0.0872665, [3, -0.4, -0.0158846], [3, 0.426667, 0.0169436]], [-0.00623519, [3, -0.426667, -1.00877e-09], [3, 0.44, 1.0403e-09]], [-0.00623519, [3, -0.44, -1.0403e-09], [3, 0.466667, 1.10335e-09]], [0.104047, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.486947, [3, -0.4, 0], [3, 0.266667, 0]], [-0.523599, [3, -0.266667, 0.0206531], [3, 0.266667, -0.0206531]], [-0.610865, [3, -0.266667, 0.0290888], [3, 0.266667, -0.0290888]], [-0.698132, [3, -0.266667, 0], [3, 0.4, 0]], [-0.610865, [3, -0.4, 0], [3, 0.426667, 0]], [-0.750492, [3, -0.426667, 0.0612924], [3, 0.44, -0.0632078]], [-0.984366, [3, -0.44, 0], [3, 0.466667, 0]], [-0.175861, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[1.04742, [3, -0.4, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.4, 0]], [1.0472, [3, -0.4, 0], [3, 0.426667, 0]], [1.053, [3, -0.426667, 0], [3, 0.44, 0]], [1.04545, [3, -0.44, 0.00754926], [3, 0.466667, -0.00800679]], [-0.0767842, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.45115, [3, -0.4, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.4, 0]], [0.441568, [3, -0.4, 0], [3, 0.426667, 0]], [1.39654, [3, -0.426667, 0], [3, 0.44, 0]], [1.39654, [3, -0.44, 7.98948e-07], [3, 0.466667, -8.47369e-07]], [1.38519, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.293906, [3, -0.4, 0], [3, 0.266667, 0]], [0.302179, [3, -0.266667, 0], [3, 0.266667, 0]], [0.302179, [3, -0.266667, 0], [3, 0.266667, 0]], [0.302179, [3, -0.266667, 0], [3, 0.4, 0]], [0.302179, [3, -0.4, 0], [3, 0.426667, 0]], [0.166304, [3, -0.426667, 3.22807e-08], [3, 0.44, -3.32895e-08]], [0.166304, [3, -0.44, 0], [3, 0.466667, 0]], [0.166304, [3, -0.466667, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.145701, [3, -0.4, 0], [3, 0.266667, 0]], [0.146244, [3, -0.266667, 0], [3, 0.266667, 0]], [0.146244, [3, -0.266667, 0], [3, 0.266667, 0]], [0.146244, [3, -0.266667, 0], [3, 0.4, 0]], [0.146244, [3, -0.4, 0], [3, 0.426667, 0]], [0.145482, [3, -0.426667, 0], [3, 0.44, 0]], [0.145482, [3, -0.44, 0], [3, 0.466667, 0]], [0.145482, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.339913, [3, -0.4, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.266667, 0]], [0.349066, [3, -0.266667, 0], [3, 0.4, 0]], [0.261799, [3, -0.4, 0.0780552], [3, 0.426667, -0.0832589]], [-0.134877, [3, -0.426667, 0], [3, 0.44, 0]], [-0.134877, [3, -0.44, -5.82566e-08], [3, 0.466667, 6.17874e-08]], [0.0775809, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.00632195, [3, -0.4, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.266667, 0]], [0, [3, -0.266667, 0], [3, 0.4, 0]], [0, [3, -0.4, 0], [3, 0.426667, 0]], [-0.00043631, [3, -0.426667, 0], [3, 0.44, 0]], [-0.00043631, [3, -0.44, -9.75279e-11], [3, 0.466667, 1.03439e-10]], [0.0991166, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[1.35327, [3, -0.4, 0], [3, 0.266667, 0]], [1.35088, [3, -0.266667, 0], [3, 0.266667, 0]], [1.35088, [3, -0.266667, 0], [3, 0.266667, 0]], [1.35088, [3, -0.266667, 0], [3, 0.4, 0]], [1.35088, [3, -0.4, 0], [3, 0.426667, 0]], [1.07643, [3, -0.426667, 0], [3, 0.44, 0]], [1.07643, [3, -0.44, 0], [3, 0.466667, 0]], [1.07643, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[1.38625, [3, -0.4, 0], [3, 0.266667, 0]], [1.39483, [3, -0.266667, 0], [3, 0.266667, 0]], [1.39483, [3, -0.266667, 0], [3, 0.266667, 0]], [1.39483, [3, -0.266667, 0], [3, 0.4, 0]], [1.39483, [3, -0.4, 0], [3, 0.426667, 0]], [0.791883, [3, -0.426667, 4.5193e-07], [3, 0.44, -4.66053e-07]], [0.791882, [3, -0.44, 0], [3, 0.466667, 0]], [0.791883, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RHand")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.293013, [3, -0.4, 0], [3, 0.266667, 0]], [0.29357, [3, -0.266667, 0], [3, 0.266667, 0]], [0.29357, [3, -0.266667, 0], [3, 0.266667, 0]], [0.29357, [3, -0.266667, 0], [3, 0.4, 0]], [0.29357, [3, -0.4, 0], [3, 0.426667, 0]], [0.288129, [3, -0.426667, 2.60093e-07], [3, 0.44, -2.68221e-07]], [0.288129, [3, -0.44, 0], [3, 0.466667, 0]], [0.288129, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-1.24064, [3, -0.4, 0], [3, 0.266667, 0]], [-1.34216, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.34216, [3, -0.266667, 0], [3, 0.266667, 0]], [-1.32471, [3, -0.266667, 0], [3, 0.4, 0]], [-1.32471, [3, -0.4, 0], [3, 0.426667, 0]], [-0.634814, [3, -0.426667, 0], [3, 0.44, 0]], [-0.634815, [3, -0.44, 0], [3, 0.466667, 0]], [0.120252, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.0376726, [3, -0.4, 0], [3, 0.266667, 0]], [0.0349066, [3, -0.266667, 0], [3, 0.266667, 0]], [0.0523599, [3, -0.266667, -0.0116355], [3, 0.266667, 0.0116355]], [0.10472, [3, -0.266667, 0], [3, 0.4, 0]], [0.0872665, [3, -0.4, 0.0158846], [3, 0.426667, -0.0169436]], [0.00623519, [3, -0.426667, 1.00877e-09], [3, 0.44, -1.0403e-09]], [0.00623519, [3, -0.44, 1.0403e-09], [3, 0.466667, -1.10335e-09]], [-0.106957, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.486947, [3, -0.4, 0], [3, 0.266667, 0]], [-0.523599, [3, -0.266667, 0.0206531], [3, 0.266667, -0.0206531]], [-0.610865, [3, -0.266667, 0.0290888], [3, 0.266667, -0.0290888]], [-0.698132, [3, -0.266667, 0], [3, 0.4, 0]], [-0.610865, [3, -0.4, 0], [3, 0.426667, 0]], [-0.750492, [3, -0.426667, 0.0612924], [3, 0.44, -0.0632078]], [-0.984366, [3, -0.44, 0], [3, 0.466667, 0]], [-0.175861, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[1.04742, [3, -0.4, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.266667, 0]], [1.11701, [3, -0.266667, 0], [3, 0.4, 0]], [1.0472, [3, -0.4, 0], [3, 0.426667, 0]], [1.053, [3, -0.426667, 0], [3, 0.44, 0]], [1.04545, [3, -0.44, 0.00754926], [3, 0.466667, -0.00800679]], [-0.0780461, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[0.451164, [3, -0.4, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.266667, 0]], [0.441568, [3, -0.266667, 0], [3, 0.4, 0]], [0.441568, [3, -0.4, 0], [3, 0.426667, 0]], [1.39654, [3, -0.426667, 0], [3, 0.44, 0]], [1.39654, [3, -0.44, 7.98948e-07], [3, 0.466667, -8.47369e-07]], [1.38519, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.294041, [3, -0.4, 0], [3, 0.266667, 0]], [-0.302179, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.302179, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.302179, [3, -0.266667, 0], [3, 0.4, 0]], [-0.302179, [3, -0.4, 0], [3, 0.426667, 0]], [-0.166304, [3, -0.426667, -3.22807e-08], [3, 0.44, 3.32895e-08]], [-0.166304, [3, -0.44, 0], [3, 0.466667, 0]], [-0.166304, [3, -0.466667, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([1.16, 1.96, 2.76, 3.56, 4.76, 6.04, 7.36, 8.76])
keys.append([[-0.13878, [3, -0.4, 0], [3, 0.266667, 0]], [-0.143533, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.143533, [3, -0.266667, 0], [3, 0.266667, 0]], [-0.143533, [3, -0.266667, 0], [3, 0.4, 0]], [-0.143533, [3, -0.4, 0], [3, 0.426667, 0]], [-0.148822, [3, -0.426667, 0], [3, 0.44, 0]], [-0.148822, [3, -0.44, 0], [3, 0.466667, 0]], [-0.148822, [3, -0.466667, 0], [3, 0, 0]]])


time_threshold = 6.04
truncated_times, truncated_keys = truncate_times_and_keys_from_threshold(times, keys, time_threshold)

times = truncated_times
keys = truncated_keys

# motionProxy.angleInterpolationBezier(names, truncated_times, truncated_keys)